//Position the blue band under the Profile button
@mixin tert-nav-active($bandWidth, $bandPos: 0) {
	background-color: $blue-button;
	height: 100%;
	width: $bandWidth;
	position: absolute;
	right: $bandPos;
}

//Set font sizes in rem with px fallback
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

//p {@include font-size(16px);}

@mixin backImage($image, $alpha: 0, $height: 100vh, $bgPos: center center) {
    background: linear-gradient( to bottom, rgba(0,0,0, $alpha), rgba(0,0,0,.6) ), url($image);
    background-repeat: no-repeat;
    background-position: $bgPos;
    background-size: cover;
    height: $height;
}

@mixin clearfix {
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}

@mixin imagegrid ($qty, $margin) {
    width: ((100% - (($qty - 1) * $margin)) / $qty);
    &:nth-child(n) {
        margin-bottom: $margin;
        margin-right: $margin;
    }
    &:nth-child(#{$qty}n) {
        margin-bottom: 0;
        margin-right: 0;
    }
}

@mixin break($args...) {
    @if length($args) == 1 {
        @media (min-width: nth($args, 1)) {
            @content;
        }  
    }
    
    @if length($args) == 2 {
        @media (min-width: nth($args, 1))
        and (max-width: nth($args, 2)) {
            @content;
        }  
    }
}

//Mixins to keep media queries with styles in the final output css file
@mixin bp-tablet {
	@media only screen and (max-width: 768px) {
		@content;
	}
}

@mixin bp-medium {
	@media only screen and (max-width: 40em) {
		@content;
	}
}

@mixin bp-small {
	@media only screen and (max-width: 30em) {
		@content;
	}
}

//This will hide an element but keep it detectable by screen readers
@mixin visuallyhidden {
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	clip: rect(0, 0, 0, 0);
	position: absolute;
}

@mixin transition($args...) {
	-webkit-transition: $args;
	-moz-transition: $args;
	-ms-transition: $args;
	-o-transition: $args;
	transition: $args;
}

@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}  
	@-ms-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}  
	@keyframes #{$animation-name} {
		@content;
	}
}

@mixin animation($str) {
	-webkit-animation: #{$str};
	-moz-animation: #{$str};
	-ms-animation: #{$str};
	-o-animation: #{$str};
	animation: #{$str};      
}

//SVG background image with PNG fallback mixin
@mixin background-image($name, $size:false){
    background-image: url(#{$image-path}/#{$name}.svg);
    @if($size){
        background-size: $size;
    }
    .no-svg &{
        background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

        @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
          background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
        }
    }
}

//Create triangles
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false){
    @include pseudo($pos: $position);
    width: 0;
    height: 0;
    @if $round {
        border-radius: 3px;
    }
    @if $direction == down {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
        margin-top: 0 - round( $size / 2.5 );
    } @else if $direction == up {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
        margin-bottom: 0 - round( $size / 2.5 );
    } @else if $direction == right {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
        margin-right: -$size;
    } @else if  $direction == left {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
        margin-left: -$size;
    }
}

//Truncate ... text
@mixin truncate($truncation-boundary) {
    max-width: $truncation-boundary;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

//Center an element horizontally
@mixin push--auto {
    margin: { 
        left: auto;
        right: auto;
    }
}

//Style placeholders with vendor prefixes
@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}